{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Wrapper for Laminar Research X-Plane Web API","text":"<p>See X-Plane Web API.</p> <p>Documentation</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install 'xpwebapi @ git+https://github.com/devleaks/xplane-webapi.git'\n</code></pre> <p>For development, add option <code>dev</code>:</p> <pre><code>pip install 'xpwebapi[dev] @ git+https://github.com/devleaks/xplane-webapi.git'\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#320-2025-08-09","title":"3.2.0 - 2025-08-09","text":"<p>Breaking change, <code>api.execute()</code> is now more explicitely <code>api.execute_command()</code>.</p>"},{"location":"changelog/#310-2025-07-31","title":"3.1.0 - 2025-07-31","text":"<p>Added callback to UDP dataref monitoring, like other rest and/or websocket API. Wow.</p>"},{"location":"changelog/#300-2025-07-07","title":"3.0.0 - 2025-07-07","text":"<p>Breaking change.</p> <p>Datarefs of value type \"data\" are returned as bytes. The API only performs BASE64 encode/decode with no further interpretation.</p> <p>Convenience methods <code>get_string_value(encoding: str)</code> and <code>set_string_value(value: str, encoding: str)</code> are provided to Dataref to get/set string values. In all cases, string encoding need to be provided. There is no default encoding.</p> <p>Note: It is possible to use python package <code>chardet</code> to guess encoding from bytes.</p>"},{"location":"changelog/#201-2025-06-15","title":"2.0.1 - 2025-06-15","text":"<p>Allows for multiple callback functions. <code>set_callback</code> adds callback to list of callbacks, all called in turn.</p> <p>In a next release, all handlers will be set of handlers.</p>"},{"location":"changelog/#200-2025-06-04","title":"2.0.0 - 2025-06-04","text":"<p>Refactor handlers.</p>"},{"location":"changelog/#12o-2025-06-03","title":"1.2.O - 2025-06-03","text":"<p>Changed beacon callback prototype to pass beacon data and \u00absame host\u00bb information in one call.</p>"},{"location":"changelog/#11o-2025-06-02","title":"1.1.O - 2025-06-02","text":"<p>Using natsort for version ordering as returned from X-Plane API capabilities.</p> <p>Improved documentation.</p>"},{"location":"changelog/#10o-2025-05-30","title":"1.0.O - 2025-05-30","text":"<p>Initial release</p>"},{"location":"reference/","title":"API reference","text":""},{"location":"reference/#xpwebapi","title":"xpwebapi","text":"<p>Modules:</p> <ul> <li> <code>api</code>           \u2013            <p>Abstract base classes and core classes like Dataref and Command.</p> </li> <li> <code>beacon</code>           \u2013            <p>X-Plane UDP Beacon Monitor</p> </li> <li> <code>rest</code>           \u2013            <p>X-Plane Web API access through REST API</p> </li> <li> <code>udp</code>           \u2013            <p>X-Plane access through UDP messages</p> </li> <li> <code>ws</code>           \u2013            <p>X-Plane Web API access through Websocket API</p> </li> </ul>"},{"location":"reference/#xpwebapi.api","title":"api","text":"<p>Abstract base classes and core classes like Dataref and Command.</p> <p>Classes:</p> <ul> <li> <code>API</code>           \u2013            <p>API Abstract class with connection information</p> </li> <li> <code>APIObjMeta</code>           \u2013            <p>Container for XP Web API models meta data</p> </li> <li> <code>CONNECTION_STATUS</code>           \u2013            <p>Internal Beacon Connector status</p> </li> <li> <code>Cache</code>           \u2013            <p>Stores dataref or command meta data in cache</p> </li> <li> <code>Command</code>           \u2013            <p>X-Plane Web API Command</p> </li> <li> <code>CommandMeta</code>           \u2013            <p>Container for XP Web API command meta data</p> </li> <li> <code>DATAREF_DATATYPE</code>           \u2013            <p>X-Plane API dataref types</p> </li> <li> <code>Dataref</code>           \u2013            <p>X-Plane Web API Dataref</p> </li> <li> <code>DatarefMeta</code>           \u2013            <p>Container for XP Web API dataref meta data</p> </li> <li> <code>XPLANE_API_VERSIONS</code>           \u2013            <p>API version number (string) versus X-Plane release number when that API version appeared for the first time</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.API","title":"API","text":"<pre><code>API(host: str, port: int, api: str, api_version: str)\n</code></pre> <p>API Abstract class with connection information</p> <p>Methods:</p> <ul> <li> <code>beacon_callback</code>             \u2013              <p>Minimal beacon callback function.</p> </li> <li> <code>command</code>             \u2013              <p>Create Command with current API</p> </li> <li> <code>dataref</code>             \u2013              <p>Create Dataref with current API</p> </li> <li> <code>dataref_value</code>             \u2013              <p>Returns Dataref value from simulator</p> </li> <li> <code>execute_command</code>             \u2013              <p>Execute command</p> </li> <li> <code>set_network</code>             \u2013              <p>Set network and API parameters for connection</p> </li> <li> <code>write_dataref</code>             \u2013              <p>Write Dataref value to X-Plane if Dataref is writable</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>connected</code>               (<code>bool</code>)           \u2013            <p>Whether X-Plane API is reachable through this instance</p> </li> <li> <code>rest_url</code>               (<code>str</code>)           \u2013            <p>URL for the REST API</p> </li> <li> <code>status</code>               (<code>CONNECTION_STATUS</code>)           \u2013            <p>Connection status</p> </li> <li> <code>status_str</code>               (<code>str</code>)           \u2013            <p>Connection status as a string</p> </li> <li> <code>use_rest</code>               (<code>bool</code>)           \u2013            <p>Should use REST API for some purpose</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.API.connected","title":"connected  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>connected: bool\n</code></pre> <p>Whether X-Plane API is reachable through this instance</p>"},{"location":"reference/#xpwebapi.api.API.rest_url","title":"rest_url  <code>property</code>","text":"<pre><code>rest_url: str\n</code></pre> <p>URL for the REST API</p>"},{"location":"reference/#xpwebapi.api.API.status","title":"status  <code>property</code> <code>writable</code>","text":"<pre><code>status: CONNECTION_STATUS\n</code></pre> <p>Connection status</p>"},{"location":"reference/#xpwebapi.api.API.status_str","title":"status_str  <code>property</code>","text":"<pre><code>status_str: str\n</code></pre> <p>Connection status as a string</p>"},{"location":"reference/#xpwebapi.api.API.use_rest","title":"use_rest  <code>property</code> <code>writable</code>","text":"<pre><code>use_rest: bool\n</code></pre> <p>Should use REST API for some purpose</p>"},{"location":"reference/#xpwebapi.api.API.beacon_callback","title":"beacon_callback","text":"<pre><code>beacon_callback(connected: bool, beacon_data: 'BeaconData', same_host: bool)\n</code></pre> <p>Minimal beacon callback function.</p> <p>Provided for convenience.</p> <p>Parameters:</p>"},{"location":"reference/#xpwebapi.api.API.beacon_callback(connected)","title":"<code>connected</code>","text":"(<code>bool</code>)           \u2013            <p>Whether beacon is received</p>"},{"location":"reference/#xpwebapi.api.API.beacon_callback(beacon_data)","title":"<code>beacon_data</code>","text":"(<code>BeaconData</code>)           \u2013            <p>Beacon data</p>"},{"location":"reference/#xpwebapi.api.API.beacon_callback(same_host)","title":"<code>same_host</code>","text":"(<code>bool</code>)           \u2013            <p>Whether beacon is issued from same host as host running the monitor</p>"},{"location":"reference/#xpwebapi.api.API.command","title":"command","text":"<pre><code>command(path: str) -&gt; Command\n</code></pre> <p>Create Command with current API</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Command</code> (              <code>Command</code> )          \u2013            <p>Created command</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.API.command(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Command \"path\"</p>"},{"location":"reference/#xpwebapi.api.API.dataref","title":"dataref","text":"<pre><code>dataref(path: str, auto_save: bool = False) -&gt; Dataref\n</code></pre> <p>Create Dataref with current API</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Dataref</code> (              <code>Dataref</code> )          \u2013            <p>Created dataref</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.API.dataref(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Dataref \"path\"</p>"},{"location":"reference/#xpwebapi.api.API.dataref(auto_save)","title":"<code>auto_save</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Save dataref back to X-Plane if value has changed and writable (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.api.API.dataref_value","title":"dataref_value  <code>abstractmethod</code>","text":"<pre><code>dataref_value(dataref: Dataref, raw: bool = False) -&gt; DatarefValueType\n</code></pre> <p>Returns Dataref value from simulator</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DatarefValueType</code>           \u2013            <p>bool | str | int | float: Value of dataref</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.API.dataref_value(dataref)","title":"<code>dataref</code>","text":"(<code>Dataref</code>)           \u2013            <p>Dataref to get the value from</p>"},{"location":"reference/#xpwebapi.api.API.execute_command","title":"execute_command  <code>abstractmethod</code>","text":"<pre><code>execute_command(command: Command, duration: float = 0.0) -&gt; bool | int\n</code></pre> <p>Execute command</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool | int</code> )          \u2013            <p>[description]</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.API.execute_command(command)","title":"<code>command</code>","text":"(<code>Command</code>)           \u2013            <p>Command to execute</p>"},{"location":"reference/#xpwebapi.api.API.execute_command(duration)","title":"<code>duration</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Duration of execution for long commands (default: <code>0.0</code>)</p>"},{"location":"reference/#xpwebapi.api.API.set_network","title":"set_network","text":"<pre><code>set_network(host: str, port: int, api: str, api_version: str) -&gt; bool\n</code></pre> <p>Set network and API parameters for connection</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if some network parameter has changed</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.API.set_network(host)","title":"<code>host</code>","text":"(<code>str</code>)           \u2013            <p>Host name or IP address</p>"},{"location":"reference/#xpwebapi.api.API.set_network(port)","title":"<code>port</code>","text":"(<code>int</code>)           \u2013            <p>TCP port number for API</p>"},{"location":"reference/#xpwebapi.api.API.set_network(api)","title":"<code>api</code>","text":"(<code>str</code>)           \u2013            <p>API root path, starts with /.</p>"},{"location":"reference/#xpwebapi.api.API.set_network(api_version)","title":"<code>api_version</code>","text":"(<code>str</code>)           \u2013            <p>API version string, starts with /, appended to api string to form full path to API.</p>"},{"location":"reference/#xpwebapi.api.API.write_dataref","title":"write_dataref  <code>abstractmethod</code>","text":"<pre><code>write_dataref(dataref: Dataref) -&gt; bool | int\n</code></pre> <p>Write Dataref value to X-Plane if Dataref is writable</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool | int</code> )          \u2013            <p>Whether write operation was successful or not</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.API.write_dataref(dataref)","title":"<code>dataref</code>","text":"(<code>Dataref</code>)           \u2013            <p>Dataref to write</p>"},{"location":"reference/#xpwebapi.api.APIObjMeta","title":"APIObjMeta","text":"<pre><code>APIObjMeta(name: str, ident: int)\n</code></pre> <p>Container for XP Web API models meta data</p>"},{"location":"reference/#xpwebapi.api.CONNECTION_STATUS","title":"CONNECTION_STATUS","text":"<p>Internal Beacon Connector status</p>"},{"location":"reference/#xpwebapi.api.Cache","title":"Cache","text":"<pre><code>Cache(api: API)\n</code></pre> <p>Stores dataref or command meta data in cache</p> <p>Must be \"refreshed\" each time a new connection is created. Must be refreshed each time a new aircraft is loaded (for new datarefs, commands, etc.) reload_cache() is provided in xpwebapi.</p> <p>There is no faster structure than a python dict() for (name,value) pair storage.</p> <p>Methods:</p> <ul> <li> <code>equiv</code>             \u2013              <p>Return identifier/name equivalence, for diaply prupose in format 1234(path/to/object)</p> </li> <li> <code>get</code>             \u2013              <p>Get meta data from cache by name</p> </li> <li> <code>get_by_id</code>             \u2013              <p>Get meta data from cache by dataref or command identifier</p> </li> <li> <code>get_by_name</code>             \u2013              <p>Get meta data from cache by name</p> </li> <li> <code>load</code>             \u2013              <p>Load cache data</p> </li> <li> <code>meta</code>             \u2013              <p>Create DatarefMeta or CommandMeta from dictionary of meta data returned by X-Plane Web API</p> </li> <li> <code>save</code>             \u2013              <p>Saved cached data into file</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>count</code>               (<code>int</code>)           \u2013            <p>Number of data in cache</p> </li> <li> <code>has_data</code>               (<code>bool</code>)           \u2013            <p>Cache contains data</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.Cache.count","title":"count  <code>property</code>","text":"<pre><code>count: int\n</code></pre> <p>Number of data in cache</p>"},{"location":"reference/#xpwebapi.api.Cache.has_data","title":"has_data  <code>property</code>","text":"<pre><code>has_data: bool\n</code></pre> <p>Cache contains data</p>"},{"location":"reference/#xpwebapi.api.Cache.equiv","title":"equiv","text":"<pre><code>equiv(ident) -&gt; str | None\n</code></pre> <p>Return identifier/name equivalence, for diaply prupose in format 1234(path/to/object)</p>"},{"location":"reference/#xpwebapi.api.Cache.get","title":"get","text":"<pre><code>get(name) -&gt; DatarefMeta | CommandMeta | None\n</code></pre> <p>Get meta data from cache by name</p>"},{"location":"reference/#xpwebapi.api.Cache.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(ident: int) -&gt; DatarefMeta | CommandMeta | None\n</code></pre> <p>Get meta data from cache by dataref or command identifier</p>"},{"location":"reference/#xpwebapi.api.Cache.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(name) -&gt; DatarefMeta | CommandMeta | None\n</code></pre> <p>Get meta data from cache by name</p>"},{"location":"reference/#xpwebapi.api.Cache.load","title":"load","text":"<pre><code>load(path)\n</code></pre> <p>Load cache data</p>"},{"location":"reference/#xpwebapi.api.Cache.meta","title":"meta  <code>classmethod</code>","text":"<pre><code>meta(**kwargs) -&gt; DatarefMeta | CommandMeta\n</code></pre> <p>Create DatarefMeta or CommandMeta from dictionary of meta data returned by X-Plane Web API</p>"},{"location":"reference/#xpwebapi.api.Cache.save","title":"save","text":"<pre><code>save(filename)\n</code></pre> <p>Saved cached data into file</p>"},{"location":"reference/#xpwebapi.api.Command","title":"Command","text":"<pre><code>Command(api: API, path: str, duration: float = 0.0)\n</code></pre> <p>X-Plane Web API Command</p> <p>Methods:</p> <ul> <li> <code>execute</code>             \u2013              <p>Execute command through API supplied at creation</p> </li> <li> <code>monitor</code>             \u2013              <p>Monitor command activation through Websocket API</p> </li> <li> <code>unmonitor</code>             \u2013              <p>Suppress monitor command activation through Websocket API</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>description</code>               (<code>str | None</code>)           \u2013            <p>Get command description as provided by X-Plane</p> </li> <li> <code>ident</code>               (<code>int | None</code>)           \u2013            <p>Get command identifier meta data</p> </li> <li> <code>meta</code>               (<code>CommandMeta | None</code>)           \u2013            <p>Meta data of command</p> </li> <li> <code>valid</code>               (<code>bool</code>)           \u2013            <p>Returns whether meta data for command was acquired sucessfully to carry on operations on it</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.Command.description","title":"description  <code>property</code>","text":"<pre><code>description: str | None\n</code></pre> <p>Get command description as provided by X-Plane</p>"},{"location":"reference/#xpwebapi.api.Command.ident","title":"ident  <code>property</code>","text":"<pre><code>ident: int | None\n</code></pre> <p>Get command identifier meta data</p>"},{"location":"reference/#xpwebapi.api.Command.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: CommandMeta | None\n</code></pre> <p>Meta data of command</p>"},{"location":"reference/#xpwebapi.api.Command.valid","title":"valid  <code>property</code>","text":"<pre><code>valid: bool\n</code></pre> <p>Returns whether meta data for command was acquired sucessfully to carry on operations on it</p>"},{"location":"reference/#xpwebapi.api.Command.execute","title":"execute","text":"<pre><code>execute(duration: float = 0.0) -&gt; bool\n</code></pre> <p>Execute command through API supplied at creation</p>"},{"location":"reference/#xpwebapi.api.Command.monitor","title":"monitor","text":"<pre><code>monitor(on: bool = True) -&gt; bool\n</code></pre> <p>Monitor command activation through Websocket API</p>"},{"location":"reference/#xpwebapi.api.Command.unmonitor","title":"unmonitor","text":"<pre><code>unmonitor() -&gt; bool\n</code></pre> <p>Suppress monitor command activation through Websocket API</p>"},{"location":"reference/#xpwebapi.api.CommandMeta","title":"CommandMeta","text":"<pre><code>CommandMeta(name: str, description: str, **kwargs)\n</code></pre> <p>Container for XP Web API command meta data</p>"},{"location":"reference/#xpwebapi.api.DATAREF_DATATYPE","title":"DATAREF_DATATYPE","text":"<p>X-Plane API dataref types</p>"},{"location":"reference/#xpwebapi.api.Dataref","title":"Dataref","text":"<pre><code>Dataref(path: str, api: API, auto_save: bool = False)\n</code></pre> <p>X-Plane Web API Dataref</p> <p>Methods:</p> <ul> <li> <code>dec_monitor</code>             \u2013              <p>Unregister dataref from monitoring</p> </li> <li> <code>get_string_value</code>             \u2013              <p>Decodes current dataref value and replaces it with the decoded string value</p> </li> <li> <code>get_value</code>             \u2013              <p>Return current value of dataref in local application</p> </li> <li> <code>inc_monitor</code>             \u2013              <p>Register dataref for monitoring</p> </li> <li> <code>monitor</code>             \u2013              <p>Monitor dataref value change</p> </li> <li> <code>set_string_value</code>             \u2013              <p>Set dataref value to base64 encoded representation of string value</p> </li> <li> <code>unmonitor</code>             \u2013              <p>Unmonitor dataref value change</p> </li> <li> <code>write</code>             \u2013              <p>Write new value to X-Plane through REST API</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>ident</code>               (<code>int | None</code>)           \u2013            <p>Get dataref identifier meta data</p> </li> <li> <code>is_array</code>               (<code>bool</code>)           \u2013            <p>Whether dataref is an array</p> </li> <li> <code>is_monitored</code>           \u2013            <p>Whether dataref is currently monitored</p> </li> <li> <code>is_writable</code>               (<code>bool</code>)           \u2013            <p>Whether dataref can be written back to X-Plane</p> </li> <li> <code>last_updated</code>               (<code>datetime</code>)           \u2013            <p>Returns last time of modification</p> </li> <li> <code>meta</code>               (<code>DatarefMeta | None</code>)           \u2013            <p>Meta data of dataref</p> </li> <li> <code>monitored_count</code>               (<code>int</code>)           \u2013            <p>How many times dataref is monitored</p> </li> <li> <code>valid</code>               (<code>bool</code>)           \u2013            <p>Returns whether meta data for dataref was acquired sucessfully to carry on operations on it</p> </li> <li> <code>value</code>           \u2013            <p>Return current value of dataref in local application</p> </li> <li> <code>value_type</code>               (<code>str | None</code>)           \u2013            <p>Get dataref value type meta data</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.Dataref.ident","title":"ident  <code>property</code>","text":"<pre><code>ident: int | None\n</code></pre> <p>Get dataref identifier meta data</p>"},{"location":"reference/#xpwebapi.api.Dataref.is_array","title":"is_array  <code>property</code>","text":"<pre><code>is_array: bool\n</code></pre> <p>Whether dataref is an array</p>"},{"location":"reference/#xpwebapi.api.Dataref.is_monitored","title":"is_monitored  <code>property</code>","text":"<pre><code>is_monitored\n</code></pre> <p>Whether dataref is currently monitored</p>"},{"location":"reference/#xpwebapi.api.Dataref.is_writable","title":"is_writable  <code>property</code>","text":"<pre><code>is_writable: bool\n</code></pre> <p>Whether dataref can be written back to X-Plane</p>"},{"location":"reference/#xpwebapi.api.Dataref.last_updated","title":"last_updated  <code>property</code>","text":"<pre><code>last_updated: datetime\n</code></pre> <p>Returns last time of modification</p>"},{"location":"reference/#xpwebapi.api.Dataref.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: DatarefMeta | None\n</code></pre> <p>Meta data of dataref</p>"},{"location":"reference/#xpwebapi.api.Dataref.monitored_count","title":"monitored_count  <code>property</code>","text":"<pre><code>monitored_count: int\n</code></pre> <p>How many times dataref is monitored</p>"},{"location":"reference/#xpwebapi.api.Dataref.valid","title":"valid  <code>property</code>","text":"<pre><code>valid: bool\n</code></pre> <p>Returns whether meta data for dataref was acquired sucessfully to carry on operations on it</p>"},{"location":"reference/#xpwebapi.api.Dataref.value","title":"value  <code>property</code> <code>writable</code>","text":"<pre><code>value\n</code></pre> <p>Return current value of dataref in local application</p>"},{"location":"reference/#xpwebapi.api.Dataref.value_type","title":"value_type  <code>property</code>","text":"<pre><code>value_type: str | None\n</code></pre> <p>Get dataref value type meta data</p> Valid value types are <ul> <li>INTEGER = \"int\"</li> <li>FLOAT = \"float\"</li> <li>DOUBLE = \"double\"</li> <li>INTARRAY = \"int_array\"</li> <li>FLOATARRAY = \"float_array\"</li> <li>DATA = \"data\"</li> </ul>"},{"location":"reference/#xpwebapi.api.Dataref.dec_monitor","title":"dec_monitor","text":"<pre><code>dec_monitor() -&gt; bool\n</code></pre> <p>Unregister dataref from monitoring</p> <p>Returns bool: Whether dataref is still monitored after this unmonitoring() call</p>"},{"location":"reference/#xpwebapi.api.Dataref.get_string_value","title":"get_string_value","text":"<pre><code>get_string_value(encoding: str) -&gt; str | None\n</code></pre> <p>Decodes current dataref value and replaces it with the decoded string value</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str | None</code>           \u2013            </li> </ul>"},{"location":"reference/#xpwebapi.api.Dataref.get_string_value(encoding| None)","title":"<code>encoding| None</code>","text":"(<code>[str]</code>)           \u2013            <p>[description] (default: <code>None</code>)</p>"},{"location":"reference/#xpwebapi.api.Dataref.get_value","title":"get_value","text":"<pre><code>get_value()\n</code></pre> <p>Return current value of dataref in local application</p>"},{"location":"reference/#xpwebapi.api.Dataref.inc_monitor","title":"inc_monitor","text":"<pre><code>inc_monitor()\n</code></pre> <p>Register dataref for monitoring</p>"},{"location":"reference/#xpwebapi.api.Dataref.monitor","title":"monitor","text":"<pre><code>monitor() -&gt; bool\n</code></pre> <p>Monitor dataref value change</p>"},{"location":"reference/#xpwebapi.api.Dataref.set_string_value","title":"set_string_value","text":"<pre><code>set_string_value(value: str, encoding: str)\n</code></pre> <p>Set dataref value to base64 encoded representation of string value</p> <p>[description]</p> <p>Parameters:</p>"},{"location":"reference/#xpwebapi.api.Dataref.set_string_value(value)","title":"<code>value</code>","text":"(<code>str</code>)           \u2013            <p>[description]</p>"},{"location":"reference/#xpwebapi.api.Dataref.set_string_value(encoding)","title":"<code>encoding</code>","text":"(<code>str</code>)           \u2013            <p>[description]</p>"},{"location":"reference/#xpwebapi.api.Dataref.unmonitor","title":"unmonitor","text":"<pre><code>unmonitor() -&gt; bool\n</code></pre> <p>Unmonitor dataref value change</p>"},{"location":"reference/#xpwebapi.api.Dataref.write","title":"write","text":"<pre><code>write() -&gt; bool\n</code></pre> <p>Write new value to X-Plane through REST API</p> <p>Dataref value is saved locally and written to X-Plane when write() or save() is called.</p>"},{"location":"reference/#xpwebapi.api.DatarefMeta","title":"DatarefMeta","text":"<pre><code>DatarefMeta(name: str, value_type: str, is_writable: bool, **kwargs)\n</code></pre> <p>Container for XP Web API dataref meta data</p> <p>Methods:</p> <ul> <li> <code>append_index</code>             \u2013              <p>Add index to list of requested indices for dataref of type array of value</p> </li> <li> <code>last_indices</code>             \u2013              <p>Get list of last requested indices</p> </li> <li> <code>save_indices</code>             \u2013              <p>Keep a copy of indices as requested</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>is_array</code>               (<code>bool</code>)           \u2013            <p>Is dataref an array of values</p> </li> </ul>"},{"location":"reference/#xpwebapi.api.DatarefMeta.is_array","title":"is_array  <code>property</code>","text":"<pre><code>is_array: bool\n</code></pre> <p>Is dataref an array of values</p>"},{"location":"reference/#xpwebapi.api.DatarefMeta.append_index","title":"append_index","text":"<pre><code>append_index(i)\n</code></pre> <p>Add index to list of requested indices for dataref of type array of value</p> <p>Note from Web API instruction/manual: If you subscribed to certain indexes of the dataref, they\u2019ll be sent in the index order but no sparse arrays will be sent. For example if you subscribed to indexes [1, 5, 7] you\u2019ll get a 3 item array like [200, 200, 200], meaning you need to remember that the first item of that response corresponds to index 1, the second to index 5 and the third to index 7 of the dataref. This also means that if you subscribe to index 2 and later to index 0 you\u2019ll get them as [0,2]. So bottom line is \u2014 keep it simple: either ask for a single index, or a range, or all; and if later your requirements change, unsubscribe, then subscribe again.</p>"},{"location":"reference/#xpwebapi.api.DatarefMeta.last_indices","title":"last_indices","text":"<pre><code>last_indices() -&gt; list\n</code></pre> <p>Get list of last requested indices</p>"},{"location":"reference/#xpwebapi.api.DatarefMeta.save_indices","title":"save_indices","text":"<pre><code>save_indices()\n</code></pre> <p>Keep a copy of indices as requested</p>"},{"location":"reference/#xpwebapi.api.XPLANE_API_VERSIONS","title":"XPLANE_API_VERSIONS","text":"<p>API version number (string) versus X-Plane release number when that API version appeared for the first time</p>"},{"location":"reference/#xpwebapi.beacon","title":"beacon","text":"<p>X-Plane UDP Beacon Monitor</p> <p>Beacon Monitor listen to X-Plane UDP multicast port for a \u00abbeacon\u00bb emitted by X-Plane network API, if enabled. If no beacon is ever detected, either X-Plane is not running, or it is busy starting. If a beacon is detected, the message contains connection information to reach X-Plane instance through the network. Beacon also contains information about the version of X-Plane.</p> <p>Attributes:</p> <ul> <li> <code>logger</code>               (<code>Logger</code>)           \u2013            <p>Loger for functions and classes in this file.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>BEACON_DATA</code>           \u2013            <p>X-Plane names of attributes inside its beacon.</p> </li> <li> <code>BEACON_MONITOR_STATUS</code>           \u2013            <p>Internal status of Beacon Monitor.</p> </li> <li> <code>BeaconData</code>           \u2013            <p>Pythonic dataclass to host X-Plane Beacon data.</p> </li> <li> <code>XPBeaconMonitor</code>           \u2013            <p>X-Plane \u00abbeacon\u00bb monitor.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>list_my_ips</code>             \u2013              <p>Utility function that list most if not all IP addresses of this host.</p> </li> </ul>"},{"location":"reference/#xpwebapi.beacon.BEACON_DATA","title":"BEACON_DATA","text":"<p>X-Plane names of attributes inside its beacon.</p>"},{"location":"reference/#xpwebapi.beacon.BEACON_MONITOR_STATUS","title":"BEACON_MONITOR_STATUS","text":"<p>Internal status of Beacon Monitor.</p> <ul> <li>NOT_RUNNING - Beacon is not running</li> <li>RUNNING - Beacon monitor is running but no beacon detected</li> <li>DETECTING_BEACON - Beacon monitor is running and beacon detected</li> </ul>"},{"location":"reference/#xpwebapi.beacon.BeaconData","title":"BeaconData  <code>dataclass</code>","text":"<pre><code>BeaconData(host: str, port: int, hostname: str, xplane_version: int, role: int)\n</code></pre> <p>Pythonic dataclass to host X-Plane Beacon data.</p>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor","title":"XPBeaconMonitor","text":"<pre><code>XPBeaconMonitor()\n</code></pre> <p>X-Plane \u00abbeacon\u00bb monitor.</p> <p>Monitors X-Plane beacon which betrays X-Plane UDP port reachability. Beacon monitor listen for X-Plane beacon on UDP port. When beacon is detected, Beacon Monitor calls back a user-supplied function whenever the reachability status changes.</p> <p>Attributes:</p> <ul> <li> <code>MCAST_GRP</code>               (<code>str</code>)           \u2013            <p>default 239.255.1.1</p> </li> <li> <code>MCAST_PORT</code>               (<code>int</code>)           \u2013            <p>default 49707 (MCAST_PORT was 49000 for XPlane10)</p> </li> <li> <code>BEACON_TIMEOUT</code>               (<code>float</code>)           \u2013            <p>default 3.0 seconds</p> </li> <li> <code>MAX_WARNING</code>               (<code>int</code>)           \u2013            <p>After MAX_WARNING warnings of \"no connection\", stops reporting \"no connection\". Default 3.</p> </li> <li> <code>BEACON_PROBING_TIMEOUT</code>               (<code>float</code>)           \u2013            <p>Times between attempts to reconnect to X-Plane when not connected (default 10 seconds)</p> </li> <li> <code>WARN_FREQ</code>               (<code>float</code>)           \u2013            <p>Report absence of connection every WARN_FREQ seconds. Default 10 seconds.</p> </li> <li> <code>socket</code>               (<code>socket | None</code>)           \u2013            <p>Socket to multicast listener</p> </li> <li> <code>status</code>               (<code>BEACON_MONITOR_STATUS</code>)           \u2013            <p>Beacon monitor status</p> </li> <li> <code>data</code>               (<code>BeaconData | None</code>)           \u2013            <p>BeaconData | None - Beacon data as broadcasted by X-Plane in its beacon. None if beacon is not received.</p> </li> <li> <code>my_ips</code>               (<code>List[str]</code>)           \u2013            <p>List of this host IP addresses</p> </li> <li> <code>_already_warned</code>               (<code>bool</code>)           \u2013            </li> <li> <code>_callback</code>               (<code>Set[Callable]</code>)           \u2013            <p>(Callable | None):</p> </li> <li> <code>should_not_connect</code>               (<code>Event</code>)           \u2013            </li> <li> <code>connect_thread</code>               (<code>Event</code>)           \u2013            <p>(threading.Thread | None):</p> </li> </ul> <p>Usage;</p> <pre><code>import xpwebapi\n\ndef callback(connected: bool, beacon_data: xpwebapi.BeaconData, same_host: bool):\n    print(\"reachable\" if connected else \"unreachable\")\n\nbeacon = xpwebapi.beacon()\nbeacon.set_callback(callback)\nbeacon.start_monitor()\n</code></pre> <p>Methods:</p> <ul> <li> <code>callback</code>             \u2013              <p>Execute all callback functions</p> </li> <li> <code>get_beacon</code>             \u2013              <p>Attemps to capture X-Plane beacon. Returns first occurence of beacon data encountered</p> </li> <li> <code>same_host</code>             \u2013              <p>Attempt to determine if X-Plane is running on local host (where beacon monitor runs) or remote host</p> </li> <li> <code>set_callback</code>             \u2013              <p>Add callback function</p> </li> <li> <code>start_monitor</code>             \u2013              <p>Starts beacon monitor</p> </li> <li> <code>stop_monitor</code>             \u2013              <p>Terminates beacon monitor</p> </li> </ul>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.consecutive_failures","title":"consecutive_failures  <code>property</code>","text":"<pre><code>consecutive_failures: int\n</code></pre> <p>Returns number of recent consecutive failures</p> <p>This can be used to detect temporary failures. When X-Plane is extremely busy, it may not send a beacon, or beacon emission can be delayed. X-Plane is up and running but no beacon has been detected. \"Missing\" a few detections in a row does not mean X-Plane is not running. This <code>consecutive_failures</code> allows to wait for a few failures to detect X-Plane before concluding its unavailability.</p>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.receiving_beacon","title":"receiving_beacon  <code>property</code>","text":"<pre><code>receiving_beacon: bool\n</code></pre> <p>Returns whether beacon from X-Plane is periodically received</p>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.status","title":"status  <code>property</code> <code>writable</code>","text":"<pre><code>status: BEACON_MONITOR_STATUS\n</code></pre> <p>Report beacon monitor status</p> <p>returns:</p> <pre><code>BEACON_MONITOR_STATUS: Monitor status\n</code></pre>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.status_str","title":"status_str  <code>property</code>","text":"<pre><code>status_str: str\n</code></pre> <p>Report beacon monitor status as a string</p>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.callback","title":"callback","text":"<pre><code>callback(connected: bool, beacon_data: BeaconData, same_host: bool)\n</code></pre> <p>Execute all callback functions</p> <p>Callback function prototype</p> <pre><code>callback(connected: bool, beacon_data: BeaconData | None, same_host: bool | None)\n</code></pre> <p>Connected is True is beacon is detected at regular interval, False otherwise</p>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.get_beacon","title":"get_beacon","text":"<pre><code>get_beacon(timeout: float = BEACON_TIMEOUT) -&gt; BeaconData | None\n</code></pre> <p>Attemps to capture X-Plane beacon. Returns first occurence of beacon data encountered    or None if no beacon was detected before timeout.</p> <p>It returns the first beacon it receives.</p> <p>BeaconData is a python dataclass with the following attributes:</p> <pre><code>class BeaconData:\n    host: str\n    port: int\n    hostname: str\n    xplane_version: int\n    role: int\n\n</code></pre> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>BeaconData | None</code>           \u2013            <p>BeaconData | None: beacon data or None if no beacon received</p> </li> </ul>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.get_beacon(timeout)","title":"<code>timeout</code>","text":"(<code>float</code>, default:                   <code>BEACON_TIMEOUT</code> )           \u2013            <p>Time to wait for receiving beacon (typical range 1 to 10 seconds.)</p>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.same_host","title":"same_host","text":"<pre><code>same_host() -&gt; bool\n</code></pre> <p>Attempt to determine if X-Plane is running on local host (where beacon monitor runs) or remote host</p>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.set_callback","title":"set_callback","text":"<pre><code>set_callback(callback: Callable | None = None)\n</code></pre> <p>Add callback function</p> <p>Callback functions will be called whenever the status of the \"connection\" changes.</p> <p>Parameters:</p> <p>Connected is True is beacon is detected at regular interval, False otherwise</p>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.set_callback(callback)","title":"<code>callback</code>","text":"(<code>Callable</code>, default:                   <code>None</code> )           \u2013            <p>Callback function Callback function prototype</p> <pre><code>callback(connected: bool, beacon_data: BeaconData | None, same_host: bool | None)\n</code></pre>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.start_monitor","title":"start_monitor","text":"<pre><code>start_monitor()\n</code></pre> <p>Starts beacon monitor</p>"},{"location":"reference/#xpwebapi.beacon.XPBeaconMonitor.stop_monitor","title":"stop_monitor","text":"<pre><code>stop_monitor()\n</code></pre> <p>Terminates beacon monitor</p>"},{"location":"reference/#xpwebapi.beacon.list_my_ips","title":"list_my_ips","text":"<pre><code>list_my_ips() -&gt; List[str]\n</code></pre> <p>Utility function that list most if not all IP addresses of this host.</p> <p>Returns:</p> <ul> <li> <code>List[str]</code>           \u2013            <p>List[str]: List of IP v4 addresses of this host on most, if not all interfaces (cable, wi-fi, bluetooth...)</p> </li> </ul>"},{"location":"reference/#xpwebapi.rest","title":"rest","text":"<p>X-Plane Web API access through REST API</p> <p>Classes:</p> <ul> <li> <code>REST_KW</code>           \u2013            <p>REST requests and response JSON keywords.</p> </li> <li> <code>XPRestAPI</code>           \u2013            <p>XPlane REST API</p> </li> </ul>"},{"location":"reference/#xpwebapi.rest.REST_KW","title":"REST_KW","text":"<p>REST requests and response JSON keywords.</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI","title":"XPRestAPI","text":"<pre><code>XPRestAPI(host: str = '127.0.0.1', port: int = 8086, api: str = '/api', api_version: str = 'v1', use_cache: bool = False)\n</code></pre> <p>XPlane REST API</p> <p>Adds cache for datarefs and commands meta data.</p> <p>There is no permanent connection to REST API. When needed, connection can be probed with XPRestAPI.connected which is True if API is reachable. Most API call test for reachability before issuing their request(s).</p> See Also <p>X-Plane Web API \u2014 REST API</p> <p>Methods:</p> <ul> <li> <code>beacon_callback</code>             \u2013              <p>Minimal beacon callback function.</p> </li> <li> <code>command</code>             \u2013              <p>Create Command with current API</p> </li> <li> <code>commands_meta</code>             \u2013              <p>Get dataref meta data through REST API for all dataref supplied</p> </li> <li> <code>dataref</code>             \u2013              <p>Create Dataref with current API</p> </li> <li> <code>dataref_meta</code>             \u2013              <p>Get dataref meta data through REST API</p> </li> <li> <code>dataref_value</code>             \u2013              <p>Get dataref value through REST API</p> </li> <li> <code>datarefs_meta</code>             \u2013              <p>Get dataref meta data through REST API for all dataref supplied</p> </li> <li> <code>execute_command</code>             \u2013              <p>Executes Command through REST API</p> </li> <li> <code>get_command_meta_by_id</code>             \u2013              <p>Get command meta data by command identifier</p> </li> <li> <code>get_command_meta_by_name</code>             \u2013              <p>Get command meta data by command path</p> </li> <li> <code>get_dataref_meta_by_id</code>             \u2013              <p>Get dataref meta data by dataref identifier</p> </li> <li> <code>get_dataref_meta_by_name</code>             \u2013              <p>Get dataref meta data by dataref name</p> </li> <li> <code>get_rest_meta</code>             \u2013              <p>Get meta data from X-Plane through REST API for object.</p> </li> <li> <code>invalidate_caches</code>             \u2013              <p>Remove cache data</p> </li> <li> <code>rebuild_dataref_ids</code>             \u2013              <p>Rebuild dataref idenfier index</p> </li> <li> <code>reload_caches</code>             \u2013              <p>Reload meta data caches</p> </li> <li> <code>set_api_version</code>             \u2013              <p>Set API version</p> </li> <li> <code>set_network</code>             \u2013              <p>Set network and API parameters for connection</p> </li> <li> <code>write_dataref</code>             \u2013              <p>Write single dataref value through REST API</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>capabilities</code>               (<code>dict</code>)           \u2013            <p>Fetches API capabilties and caches it</p> </li> <li> <code>connected</code>               (<code>bool</code>)           \u2013            <p>Whether API is reachable</p> </li> <li> <code>rest_api_reachable</code>               (<code>bool</code>)           \u2013            <p>Whether API is reachable</p> </li> <li> <code>rest_url</code>               (<code>str</code>)           \u2013            <p>URL for the REST API</p> </li> <li> <code>status</code>               (<code>CONNECTION_STATUS</code>)           \u2013            <p>Connection status</p> </li> <li> <code>status_str</code>               (<code>str</code>)           \u2013            <p>Connection status as a string</p> </li> <li> <code>uptime</code>               (<code>float</code>)           \u2013            <p>Time X-Plane has been running in seconds since start</p> </li> <li> <code>use_cache</code>               (<code>bool</code>)           \u2013            <p>Use cache for object meta data</p> </li> <li> <code>use_rest</code>               (<code>bool</code>)           \u2013            <p>Should use REST API for some purpose</p> </li> <li> <code>xp_version</code>               (<code>str | None</code>)           \u2013            <p>Returns reported X-Plane version from simulator</p> </li> </ul>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.capabilities","title":"capabilities  <code>property</code>","text":"<pre><code>capabilities: dict\n</code></pre> <p>Fetches API capabilties and caches it</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.connected","title":"connected  <code>property</code>","text":"<pre><code>connected: bool\n</code></pre> <p>Whether API is reachable</p> API may not be reachable if <ul> <li>X-Plane version before 12.1.4,</li> <li>X-Plane is not running</li> </ul>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.rest_api_reachable","title":"rest_api_reachable  <code>property</code>","text":"<pre><code>rest_api_reachable: bool\n</code></pre> <p>Whether API is reachable</p> API may not be reachable if <ul> <li>X-Plane version before 12.1.4,</li> <li>X-Plane is not running</li> </ul>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.rest_url","title":"rest_url  <code>property</code>","text":"<pre><code>rest_url: str\n</code></pre> <p>URL for the REST API</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.status","title":"status  <code>property</code> <code>writable</code>","text":"<pre><code>status: CONNECTION_STATUS\n</code></pre> <p>Connection status</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.status_str","title":"status_str  <code>property</code>","text":"<pre><code>status_str: str\n</code></pre> <p>Connection status as a string</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.uptime","title":"uptime  <code>property</code>","text":"<pre><code>uptime: float\n</code></pre> <p>Time X-Plane has been running in seconds since start</p> <p>Value is fetched from simulator dataref sim/time/total_running_time_sec</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.use_cache","title":"use_cache  <code>property</code> <code>writable</code>","text":"<pre><code>use_cache: bool\n</code></pre> <p>Use cache for object meta data</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.use_rest","title":"use_rest  <code>property</code> <code>writable</code>","text":"<pre><code>use_rest: bool\n</code></pre> <p>Should use REST API for some purpose</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.xp_version","title":"xp_version  <code>property</code>","text":"<pre><code>xp_version: str | None\n</code></pre> <p>Returns reported X-Plane version from simulator</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.beacon_callback","title":"beacon_callback","text":"<pre><code>beacon_callback(connected: bool, beacon_data: 'BeaconData', same_host: bool)\n</code></pre> <p>Minimal beacon callback function.</p> <p>Provided for convenience.</p> <p>Parameters:</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.beacon_callback(connected)","title":"<code>connected</code>","text":"(<code>bool</code>)           \u2013            <p>Whether beacon is received</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.beacon_callback(beacon_data)","title":"<code>beacon_data</code>","text":"(<code>BeaconData</code>)           \u2013            <p>Beacon data</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.beacon_callback(same_host)","title":"<code>same_host</code>","text":"(<code>bool</code>)           \u2013            <p>Whether beacon is issued from same host as host running the monitor</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.command","title":"command","text":"<pre><code>command(path: str) -&gt; Command\n</code></pre> <p>Create Command with current API</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Command</code> (              <code>Command</code> )          \u2013            <p>Created command</p> </li> </ul>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.command(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Command \"path\"</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.commands_meta","title":"commands_meta","text":"<pre><code>commands_meta(commands: List[Command], fields: List[str] | str = 'all', start: int | None = None, limit: int | None = None) -&gt; List[CommandMeta]\n</code></pre> <p>Get dataref meta data through REST API for all dataref supplied</p> <p>@todo: commands_meta(self, dataref, fields:List[str]|str = \"all\", start: int|None = None, limit: int|None = None)  # fields={id, name, description, all}</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.dataref","title":"dataref","text":"<pre><code>dataref(path: str, auto_save: bool = False) -&gt; Dataref\n</code></pre> <p>Create Dataref with current API</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Dataref</code> (              <code>Dataref</code> )          \u2013            <p>Created dataref</p> </li> </ul>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.dataref(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Dataref \"path\"</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.dataref(auto_save)","title":"<code>auto_save</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Save dataref back to X-Plane if value has changed and writable (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.dataref_meta","title":"dataref_meta","text":"<pre><code>dataref_meta(dataref, fields: List[str] | str = 'all') -&gt; DatarefMeta | None\n</code></pre> <p>Get dataref meta data through REST API</p> <p>@todo: dataref_meta(self, dataref, fields:List[str]|str = \"all\")  # fields={id, name, value_type, all}</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.dataref_value","title":"dataref_value","text":"<pre><code>dataref_value(dataref: Dataref, raw: bool = False, no_decode: bool = False) -&gt; DatarefValueType | None\n</code></pre> <p>Get dataref value through REST API</p> <p>Value is not stored or cached.</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.datarefs_meta","title":"datarefs_meta","text":"<pre><code>datarefs_meta(datarefs: List[Dataref], fields: List[str] | str = 'all', start: int | None = None, limit: int | None = None) -&gt; List[DatarefMeta]\n</code></pre> <p>Get dataref meta data through REST API for all dataref supplied</p> <p>@todo: datarefs_meta(self, dataref, fields:List[str]|str = \"all\", start: int|None = None, limit: int|None = None)  # fields={id, name, value_type, all}</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.execute_command","title":"execute_command","text":"<pre><code>execute_command(command: Command, duration: float = 0.0) -&gt; bool | int\n</code></pre> <p>Executes Command through REST API</p> <p>Returns:</p> <p>bool: success of operation</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.get_command_meta_by_id","title":"get_command_meta_by_id","text":"<pre><code>get_command_meta_by_id(ident: int) -&gt; CommandMeta | None\n</code></pre> <p>Get command meta data by command identifier</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.get_command_meta_by_name","title":"get_command_meta_by_name","text":"<pre><code>get_command_meta_by_name(path: str) -&gt; CommandMeta | None\n</code></pre> <p>Get command meta data by command path</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.get_dataref_meta_by_id","title":"get_dataref_meta_by_id","text":"<pre><code>get_dataref_meta_by_id(ident: int) -&gt; DatarefMeta | None\n</code></pre> <p>Get dataref meta data by dataref identifier</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.get_dataref_meta_by_name","title":"get_dataref_meta_by_name","text":"<pre><code>get_dataref_meta_by_name(path: str) -&gt; DatarefMeta | None\n</code></pre> <p>Get dataref meta data by dataref name</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.get_rest_meta","title":"get_rest_meta","text":"<pre><code>get_rest_meta(obj: Dataref | Command, force: bool = False) -&gt; DatarefMeta | CommandMeta | None\n</code></pre> <p>Get meta data from X-Plane through REST API for object.</p> <p>Fetches meta data and cache it unless force = True.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DatarefMeta | CommandMeta | None</code>           \u2013            <p>DatarefMeta| CommandMeta: Meta data for object.</p> </li> </ul>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.get_rest_meta(obj)","title":"<code>obj</code>","text":"(<code>Dataref | Command</code>)           \u2013            <p>Objet (Dataref or Command) to get the meta data for</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.get_rest_meta(force)","title":"<code>force</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Force new fetch, do not read from cache (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.invalidate_caches","title":"invalidate_caches","text":"<pre><code>invalidate_caches()\n</code></pre> <p>Remove cache data</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.rebuild_dataref_ids","title":"rebuild_dataref_ids","text":"<pre><code>rebuild_dataref_ids()\n</code></pre> <p>Rebuild dataref idenfier index</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.reload_caches","title":"reload_caches","text":"<pre><code>reload_caches(force: bool = False, save: bool = False)\n</code></pre> <p>Reload meta data caches</p> <p>Must be performed regularly, if aircraft changed, etc.</p> <p>Later, Laminar Research has plan for a notification of additing of datarefs</p> <p>Parameters:</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.reload_caches(force)","title":"<code>force</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Force reloading (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.reload_caches(save)","title":"<code>save</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Save raw meta data in JSON formatted files (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.set_api_version","title":"set_api_version","text":"<pre><code>set_api_version(api_version: str | None = None)\n</code></pre> <p>Set API version</p> <p>Version is often specified with a v# short string. If no version is supplied, try to take the latest version available. Version numbering is not formally specified, ordering is performed using natural sorting. (See natsort.)</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.set_network","title":"set_network","text":"<pre><code>set_network(host: str, port: int, api: str, api_version: str) -&gt; bool\n</code></pre> <p>Set network and API parameters for connection</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if some network parameter has changed</p> </li> </ul>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.set_network(host)","title":"<code>host</code>","text":"(<code>str</code>)           \u2013            <p>Host name or IP address</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.set_network(port)","title":"<code>port</code>","text":"(<code>int</code>)           \u2013            <p>TCP port number for API</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.set_network(api)","title":"<code>api</code>","text":"(<code>str</code>)           \u2013            <p>API root path, starts with /.</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.set_network(api_version)","title":"<code>api_version</code>","text":"(<code>str</code>)           \u2013            <p>API version string, starts with /, appended to api string to form full path to API.</p>"},{"location":"reference/#xpwebapi.rest.XPRestAPI.write_dataref","title":"write_dataref","text":"<pre><code>write_dataref(dataref: Dataref) -&gt; bool | int\n</code></pre> <p>Write single dataref value through REST API</p> <p>Returns:</p> <p>bool: success of operation</p>"},{"location":"reference/#xpwebapi.udp","title":"udp","text":"<p>X-Plane access through UDP messages</p> <p>UDP interface is limited to   1. Asking for dataref values, one at a time, returned as a float number.   2. Setting single dataref value in simulator (\"write\").   3. Asking for execution of a command.</p> <p>Classes:</p> <ul> <li> <code>XPUDPAPI</code>           \u2013            <p>Get data from XPlane via network.</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI","title":"XPUDPAPI","text":"<pre><code>XPUDPAPI(**kwargs)\n</code></pre> <p>Get data from XPlane via network. Use a class to implement RAI Pattern for the UDP socket.</p> <p>Methods:</p> <ul> <li> <code>add_callback</code>             \u2013              <p>Add callback function to set of callback functions</p> </li> <li> <code>beacon_callback</code>             \u2013              <p>Callback waits a little bit before shutting down websocket handler on beacon miss.</p> </li> <li> <code>command</code>             \u2013              <p>Create Command with current API</p> </li> <li> <code>dataref</code>             \u2013              <p>Create Dataref with current API</p> </li> <li> <code>dataref_value</code>             \u2013              <p>Returns Dataref value from simulator</p> </li> <li> <code>execute_callbacks</code>             \u2013              <p>Execute list of callback functions, all with same arguments passed as keyword arguments</p> </li> <li> <code>execute_command</code>             \u2013              <p>Execute command</p> </li> <li> <code>monitor_dataref</code>             \u2013              <p>Starts monitoring single dataref.</p> </li> <li> <code>read_monitored_dataref_values</code>             \u2013              <p>Do a single read and populate dataref with values.</p> </li> <li> <code>set_network</code>             \u2013              <p>Set network and API parameters for connection</p> </li> <li> <code>simple_connection_probe</code>             \u2013              <p>Exeprimental</p> </li> <li> <code>start</code>             \u2013              <p>Start UDP monitoring</p> </li> <li> <code>stop</code>             \u2013              <p>Stop UDP monitoring</p> </li> <li> <code>unmonitor_datarefs</code>             \u2013              <p>Stops monitoring supplied datarefs.</p> </li> <li> <code>write_dataref</code>             \u2013              <p>Write Dataref value to X-Plane if Dataref is writable</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>connected</code>               (<code>bool</code>)           \u2013            <p>Whether X-Plane API is reachable through this API</p> </li> <li> <code>rest_url</code>               (<code>str</code>)           \u2013            <p>URL for the REST API</p> </li> <li> <code>status</code>               (<code>CONNECTION_STATUS</code>)           \u2013            <p>Connection status</p> </li> <li> <code>status_str</code>               (<code>str</code>)           \u2013            <p>Connection status as a string</p> </li> <li> <code>use_rest</code>               (<code>bool</code>)           \u2013            <p>Should use REST API for some purpose</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.connected","title":"connected  <code>property</code>","text":"<pre><code>connected: bool\n</code></pre> <p>Whether X-Plane API is reachable through this API</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.rest_url","title":"rest_url  <code>property</code>","text":"<pre><code>rest_url: str\n</code></pre> <p>URL for the REST API</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.status","title":"status  <code>property</code> <code>writable</code>","text":"<pre><code>status: CONNECTION_STATUS\n</code></pre> <p>Connection status</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.status_str","title":"status_str  <code>property</code>","text":"<pre><code>status_str: str\n</code></pre> <p>Connection status as a string</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.use_rest","title":"use_rest  <code>property</code> <code>writable</code>","text":"<pre><code>use_rest: bool\n</code></pre> <p>Should use REST API for some purpose</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.add_callback","title":"add_callback","text":"<pre><code>add_callback(callback: Callable)\n</code></pre> <p>Add callback function to set of callback functions</p> <p>Please note that in the case of UDP, callback is called for each value it received, whether the value has changed or not.</p> <p>Parameters:</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.add_callback(callback)","title":"<code>callback</code>","text":"(<code>Callable</code>)           \u2013            <p>Callback function</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.beacon_callback","title":"beacon_callback","text":"<pre><code>beacon_callback(connected: bool, beacon_data: BeaconData, same_host: bool)\n</code></pre> <p>Callback waits a little bit before shutting down websocket handler on beacon miss.    Starts or make sure it is running on beacon hit.</p> <p>Parameters:</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.beacon_callback(connected)","title":"<code>connected</code>","text":"(<code>bool</code>)           \u2013            <p>Whether beacon is received</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.beacon_callback(beacon_data)","title":"<code>beacon_data</code>","text":"(<code>BeaconData</code>)           \u2013            <p>Beacon data</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.beacon_callback(same_host)","title":"<code>same_host</code>","text":"(<code>bool</code>)           \u2013            <p>Whether beacon is issued from same host as host running the monitor</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.command","title":"command","text":"<pre><code>command(path: str) -&gt; Command\n</code></pre> <p>Create Command with current API</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Command</code> (              <code>Command</code> )          \u2013            <p>Created command</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.command(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Command \"path\"</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.dataref","title":"dataref","text":"<pre><code>dataref(path: str, auto_save: bool = False) -&gt; Dataref\n</code></pre> <p>Create Dataref with current API</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Dataref</code> (              <code>Dataref</code> )          \u2013            <p>Created dataref</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.dataref(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Dataref \"path\"</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.dataref(auto_save)","title":"<code>auto_save</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Save dataref back to X-Plane if value has changed and writable (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.dataref_value","title":"dataref_value","text":"<pre><code>dataref_value(dataref: Dataref) -&gt; DatarefValueType | None\n</code></pre> <p>Returns Dataref value from simulator</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DatarefValueType | None</code>           \u2013            <p>bool | str | int | float: Value of dataref</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.dataref_value(dataref)","title":"<code>dataref</code>","text":"(<code>Dataref</code>)           \u2013            <p>Dataref to get the value from</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.execute_callbacks","title":"execute_callbacks","text":"<pre><code>execute_callbacks(**kwargs) -&gt; bool\n</code></pre> <p>Execute list of callback functions, all with same arguments passed as keyword arguments</p> <p>returns</p> <p>bool: Whether error reported during execution</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.execute_command","title":"execute_command","text":"<pre><code>execute_command(command: Command, duration: float = 0.0) -&gt; bool | int\n</code></pre> <p>Execute command</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool | int</code> )          \u2013            <p>[description]</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.execute_command(command)","title":"<code>command</code>","text":"(<code>Command</code>)           \u2013            <p>Command to execute</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.execute_command(duration)","title":"<code>duration</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Duration of execution for long commands (default: <code>0.0</code>)</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.monitor_dataref","title":"monitor_dataref","text":"<pre><code>monitor_dataref(dataref: Dataref) -&gt; bool | int\n</code></pre> <p>Starts monitoring single dataref.</p> <p>[description]</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.monitor_dataref(dataref)","title":"<code>dataref</code>","text":"(<code>Dataref</code>)           \u2013            <p>Dataref to monitor</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.read_monitored_dataref_values","title":"read_monitored_dataref_values","text":"<pre><code>read_monitored_dataref_values()\n</code></pre> <p>Do a single read and populate dataref with values.</p> <p>This function should be called at regular intervals to collect all requested datarefs. (A single read returns about 15 values.)</p> <p>Returns:</p> <ul> <li> <code>dict</code>          \u2013            <p>{path: value} for received datarefs so far.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>XPlaneTimeout</code>             \u2013            <p>[description]</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.set_network","title":"set_network","text":"<pre><code>set_network(host: str, port: int, api: str, api_version: str) -&gt; bool\n</code></pre> <p>Set network and API parameters for connection</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if some network parameter has changed</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.set_network(host)","title":"<code>host</code>","text":"(<code>str</code>)           \u2013            <p>Host name or IP address</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.set_network(port)","title":"<code>port</code>","text":"(<code>int</code>)           \u2013            <p>TCP port number for API</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.set_network(api)","title":"<code>api</code>","text":"(<code>str</code>)           \u2013            <p>API root path, starts with /.</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.set_network(api_version)","title":"<code>api_version</code>","text":"(<code>str</code>)           \u2013            <p>API version string, starts with /, appended to api string to form full path to API.</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.simple_connection_probe","title":"simple_connection_probe","text":"<pre><code>simple_connection_probe() -&gt; bool\n</code></pre> <p>Exeprimental</p> <p>Do we receive a UPD message within TIMEOUT seconds?</p> <p>returns:</p> <p>(bool) UPD message recieved</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.start","title":"start","text":"<pre><code>start(release: bool = True)\n</code></pre> <p>Start UDP monitoring</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop UDP monitoring</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.unmonitor_datarefs","title":"unmonitor_datarefs","text":"<pre><code>unmonitor_datarefs(datarefs: dict, reason: str | None = None) -&gt; Tuple[int | bool, Dict]\n</code></pre> <p>Stops monitoring supplied datarefs.</p> <p>[description]</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tuple[int | bool, Dict]</code>           \u2013            <p>Tuple[int | bool, Dict]: [description]</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.unmonitor_datarefs(datarefs)","title":"<code>datarefs</code>","text":"(<code>dict</code>)           \u2013            <p>{path: Dataref} dictionary of datarefs</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.unmonitor_datarefs(reason)","title":"<code>reason</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Documentation only string to identify call to function.</p>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.write_dataref","title":"write_dataref","text":"<pre><code>write_dataref(dataref: Dataref) -&gt; bool\n</code></pre> <p>Write Dataref value to X-Plane if Dataref is writable</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>Whether write operation was successful or not</p> </li> </ul>"},{"location":"reference/#xpwebapi.udp.XPUDPAPI.write_dataref(dataref)","title":"<code>dataref</code>","text":"(<code>Dataref</code>)           \u2013            <p>Dataref to write</p>"},{"location":"reference/#xpwebapi.ws","title":"ws","text":"<p>X-Plane Web API access through Websocket API</p> <p>Classes:</p> <ul> <li> <code>Request</code>           \u2013            <p>Pythonic dataclass to host X-Plane Beacon data.</p> </li> <li> <code>WS_RESPONSE_TYPE</code>           \u2013            <p>X-Plane Websocket API response types</p> </li> <li> <code>XPWebsocketAPI</code>           \u2013            <p>X-Plane Websocket Client.</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.Request","title":"Request  <code>dataclass</code>","text":"<pre><code>Request(r_id: int, body: dict, ts: datetime, ts_ack: Optional[datetime] = None, success: Optional[bool] = None, error: Optional[str] = None)\n</code></pre> <p>Pythonic dataclass to host X-Plane Beacon data.</p>"},{"location":"reference/#xpwebapi.ws.WS_RESPONSE_TYPE","title":"WS_RESPONSE_TYPE","text":"<p>X-Plane Websocket API response types</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI","title":"XPWebsocketAPI","text":"<pre><code>XPWebsocketAPI(host: str = '127.0.0.1', port: int = 8086, api: str = 'api', api_version: str = 'v2', use_rest: bool = False)\n</code></pre> <p>X-Plane Websocket Client.</p> <p>The XPWebsocketAPI is a client interface to X-Plane Web API, Websocket server.</p> <p>The XPWebsocketAPI has a connection monitor (XPWebsocketAPI.connection_monitor) that can be started (XPWebsocketAPI.connect) and stopped (XPWebsocketAPI.disconnect). The monitor tests for REST API reachability, and if reachable, creates a Websocket. If the websocket exists and is opened, requests can be made through it and responses expected.</p> <p>To handle responses, a receiver (XPWebsocketAPI.ws_listener) can be started (XPWebsocketAPI.start) and stopped (XPWebsocketAPI.stop) to process responses coming through the websocket.</p> <p>See https://developer.x-plane.com/article/x-plane-web-api/#Websockets_API.</p> <p>Methods:</p> <ul> <li> <code>add_callback</code>             \u2013              <p>Add callback function to set of callback functions</p> </li> <li> <code>beacon_callback</code>             \u2013              <p>Callback waits a little bit before shutting down websocket handler on beacon miss.</p> </li> <li> <code>command</code>             \u2013              <p>Create Command with current API</p> </li> <li> <code>commands_meta</code>             \u2013              <p>Get dataref meta data through REST API for all dataref supplied</p> </li> <li> <code>connect</code>             \u2013              <p>Starts connection to Websocket monitor</p> </li> <li> <code>connect_websocket</code>             \u2013              <p>Create and open Websocket connection if REST API is reachable</p> </li> <li> <code>connection_monitor</code>             \u2013              <p>Attempts to connect to X-Plane Websocket indefinitely until self.should_not_connect is set.</p> </li> <li> <code>dataref</code>             \u2013              <p>Create Dataref with current API</p> </li> <li> <code>dataref_meta</code>             \u2013              <p>Get dataref meta data through REST API</p> </li> <li> <code>dataref_value</code>             \u2013              <p>Get dataref value through REST API</p> </li> <li> <code>datarefs_meta</code>             \u2013              <p>Get dataref meta data through REST API for all dataref supplied</p> </li> <li> <code>disconnect</code>             \u2013              <p>Ends connection to Websocket monitor and closes websocket</p> </li> <li> <code>disconnect_websocket</code>             \u2013              <p>Gracefully closes Websocket connection</p> </li> <li> <code>execute_callbacks</code>             \u2013              <p>Execute list of callback functions, all with same arguments passed as keyword arguments</p> </li> <li> <code>execute_command</code>             \u2013              <p>Execute command in simulator.</p> </li> <li> <code>get_command_meta_by_id</code>             \u2013              <p>Get command meta data by command identifier</p> </li> <li> <code>get_command_meta_by_name</code>             \u2013              <p>Get command meta data by command path</p> </li> <li> <code>get_dataref_meta_by_id</code>             \u2013              <p>Get dataref meta data by dataref identifier</p> </li> <li> <code>get_dataref_meta_by_name</code>             \u2013              <p>Get dataref meta data by dataref name</p> </li> <li> <code>get_rest_meta</code>             \u2013              <p>Get meta data from X-Plane through REST API for object.</p> </li> <li> <code>invalidate_caches</code>             \u2013              <p>Remove cache data</p> </li> <li> <code>monitor_command_active</code>             \u2013              <p>Starts monitoring single command for activity.</p> </li> <li> <code>monitor_dataref</code>             \u2013              <p>Starts monitoring single dataref.</p> </li> <li> <code>monitor_datarefs</code>             \u2013              <p>Starts monitoring of supplied datarefs.</p> </li> <li> <code>rebuild_dataref_ids</code>             \u2013              <p>Rebuild dataref idenfier index</p> </li> <li> <code>register_bulk_command_is_active_event</code>             \u2013              <p>Register multiple commands for active reporting.</p> </li> <li> <code>register_command_is_active_event</code>             \u2013              <p>Register single command for active reporting.</p> </li> <li> <code>reload_caches</code>             \u2013              <p>Reload meta data caches</p> </li> <li> <code>reset_connection</code>             \u2013              <p>Reset Websocket connection</p> </li> <li> <code>send</code>             \u2013              <p>Send payload message (JSON) through Websocket</p> </li> <li> <code>set_api_version</code>             \u2013              <p>Set API version</p> </li> <li> <code>set_command_is_active_false_without_duration</code>             \u2013              <p>Execute command inactive with no duration</p> </li> <li> <code>set_command_is_active_true_without_duration</code>             \u2013              <p>Execute command active with no duration</p> </li> <li> <code>set_command_is_active_with_duration</code>             \u2013              <p>Execute command active with duration.</p> </li> <li> <code>set_command_is_active_without_duration</code>             \u2013              <p>Execute command active with no duration</p> </li> <li> <code>set_dataref_value</code>             \u2013              <p>Set single dataref value through Websocket</p> </li> <li> <code>set_network</code>             \u2013              <p>Set network and API parameters for connection</p> </li> <li> <code>start</code>             \u2013              <p>Start Websocket monitoring</p> </li> <li> <code>stop</code>             \u2013              <p>Stop Websocket monitoring</p> </li> <li> <code>unmonitor_command_active</code>             \u2013              <p>Stops monitoring single command for activity.</p> </li> <li> <code>unmonitor_dataref</code>             \u2013              <p>Stops monitoring single dataref.</p> </li> <li> <code>unmonitor_datarefs</code>             \u2013              <p>Stops monitoring supplied datarefs.</p> </li> <li> <code>wait_connection</code>             \u2013              <p>Waits that connection to Websocket opens.</p> </li> <li> <code>write_dataref</code>             \u2013              <p>Writes dataref value to simulator.</p> </li> <li> <code>ws_listener</code>             \u2013              <p>Read and decode websocket messages and calls back</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>capabilities</code>               (<code>dict</code>)           \u2013            <p>Fetches API capabilties and caches it</p> </li> <li> <code>connected</code>               (<code>bool</code>)           \u2013            <p>Whether client software is connect to Websoket</p> </li> <li> <code>next_req</code>               (<code>int</code>)           \u2013            <p>Provides request number for Websocket requests</p> </li> <li> <code>rest_api_reachable</code>               (<code>bool</code>)           \u2013            <p>Whether API is reachable</p> </li> <li> <code>rest_url</code>               (<code>str</code>)           \u2013            <p>URL for the REST API</p> </li> <li> <code>status</code>               (<code>CONNECTION_STATUS</code>)           \u2013            <p>Connection status</p> </li> <li> <code>status_str</code>               (<code>str</code>)           \u2013            <p>Connection status as a string</p> </li> <li> <code>uptime</code>               (<code>float</code>)           \u2013            <p>Time X-Plane has been running in seconds since start</p> </li> <li> <code>use_cache</code>               (<code>bool</code>)           \u2013            <p>Use cache for object meta data</p> </li> <li> <code>ws_url</code>               (<code>str</code>)           \u2013            <p>URL for the Websocket API</p> </li> <li> <code>xp_version</code>               (<code>str | None</code>)           \u2013            <p>Returns reported X-Plane version from simulator</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.capabilities","title":"capabilities  <code>property</code>","text":"<pre><code>capabilities: dict\n</code></pre> <p>Fetches API capabilties and caches it</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.connected","title":"connected  <code>property</code>","text":"<pre><code>connected: bool\n</code></pre> <p>Whether client software is connect to Websoket</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.next_req","title":"next_req  <code>property</code>","text":"<pre><code>next_req: int\n</code></pre> <p>Provides request number for Websocket requests</p> <p>Current request number is available through attribute <code>req_number</code>.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.rest_api_reachable","title":"rest_api_reachable  <code>property</code>","text":"<pre><code>rest_api_reachable: bool\n</code></pre> <p>Whether API is reachable</p> API may not be reachable if <ul> <li>X-Plane version before 12.1.4,</li> <li>X-Plane is not running</li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.rest_url","title":"rest_url  <code>property</code>","text":"<pre><code>rest_url: str\n</code></pre> <p>URL for the REST API</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.status","title":"status  <code>property</code> <code>writable</code>","text":"<pre><code>status: CONNECTION_STATUS\n</code></pre> <p>Connection status</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.status_str","title":"status_str  <code>property</code>","text":"<pre><code>status_str: str\n</code></pre> <p>Connection status as a string</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.uptime","title":"uptime  <code>property</code>","text":"<pre><code>uptime: float\n</code></pre> <p>Time X-Plane has been running in seconds since start</p> <p>Value is fetched from simulator dataref sim/time/total_running_time_sec</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.use_cache","title":"use_cache  <code>property</code> <code>writable</code>","text":"<pre><code>use_cache: bool\n</code></pre> <p>Use cache for object meta data</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.ws_url","title":"ws_url  <code>property</code>","text":"<pre><code>ws_url: str\n</code></pre> <p>URL for the Websocket API</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.xp_version","title":"xp_version  <code>property</code>","text":"<pre><code>xp_version: str | None\n</code></pre> <p>Returns reported X-Plane version from simulator</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.add_callback","title":"add_callback","text":"<pre><code>add_callback(cbtype: CALLBACK_TYPE, callback: Callable)\n</code></pre> <p>Add callback function to set of callback functions</p> <p>Parameters:</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.add_callback(callback)","title":"<code>callback</code>","text":"(<code>Callable</code>)           \u2013            <p>Callback function</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.beacon_callback","title":"beacon_callback","text":"<pre><code>beacon_callback(connected: bool, beacon_data: BeaconData, same_host: bool)\n</code></pre> <p>Callback waits a little bit before shutting down websocket handler on beacon miss.    Starts or make sure it is running on beacon hit.</p> <p>Parameters:</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.beacon_callback(connected)","title":"<code>connected</code>","text":"(<code>bool</code>)           \u2013            <p>Whether beacon is received</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.beacon_callback(beacon_data)","title":"<code>beacon_data</code>","text":"(<code>BeaconData</code>)           \u2013            <p>Beacon data</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.beacon_callback(same_host)","title":"<code>same_host</code>","text":"(<code>bool</code>)           \u2013            <p>Whether beacon is issued from same host as host running the monitor</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.command","title":"command","text":"<pre><code>command(path: str) -&gt; Command\n</code></pre> <p>Create Command with current API</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Command</code> (              <code>Command</code> )          \u2013            <p>Created command</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.command(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Command \"path\"</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.commands_meta","title":"commands_meta","text":"<pre><code>commands_meta(commands: List[Command], fields: List[str] | str = 'all', start: int | None = None, limit: int | None = None) -&gt; List[CommandMeta]\n</code></pre> <p>Get dataref meta data through REST API for all dataref supplied</p> <p>@todo: commands_meta(self, dataref, fields:List[str]|str = \"all\", start: int|None = None, limit: int|None = None)  # fields={id, name, description, all}</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.connect","title":"connect","text":"<pre><code>connect(reload_cache: bool = False)\n</code></pre> <p>Starts connection to Websocket monitor</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.connect_websocket","title":"connect_websocket","text":"<pre><code>connect_websocket()\n</code></pre> <p>Create and open Websocket connection if REST API is reachable</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.connection_monitor","title":"connection_monitor","text":"<pre><code>connection_monitor()\n</code></pre> <p>Attempts to connect to X-Plane Websocket indefinitely until self.should_not_connect is set. If a connection fails, drops, disappears, will try periodically to restore it.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.dataref","title":"dataref","text":"<pre><code>dataref(path: str, auto_save: bool = False) -&gt; Dataref\n</code></pre> <p>Create Dataref with current API</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Dataref</code> (              <code>Dataref</code> )          \u2013            <p>Created dataref</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.dataref(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Dataref \"path\"</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.dataref(auto_save)","title":"<code>auto_save</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Save dataref back to X-Plane if value has changed and writable (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.dataref_meta","title":"dataref_meta","text":"<pre><code>dataref_meta(dataref, fields: List[str] | str = 'all') -&gt; DatarefMeta | None\n</code></pre> <p>Get dataref meta data through REST API</p> <p>@todo: dataref_meta(self, dataref, fields:List[str]|str = \"all\")  # fields={id, name, value_type, all}</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.dataref_value","title":"dataref_value","text":"<pre><code>dataref_value(dataref: Dataref, raw: bool = False, no_decode: bool = False) -&gt; DatarefValueType | None\n</code></pre> <p>Get dataref value through REST API</p> <p>Value is not stored or cached.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.datarefs_meta","title":"datarefs_meta","text":"<pre><code>datarefs_meta(datarefs: List[Dataref], fields: List[str] | str = 'all', start: int | None = None, limit: int | None = None) -&gt; List[DatarefMeta]\n</code></pre> <p>Get dataref meta data through REST API for all dataref supplied</p> <p>@todo: datarefs_meta(self, dataref, fields:List[str]|str = \"all\", start: int|None = None, limit: int|None = None)  # fields={id, name, value_type, all}</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.disconnect","title":"disconnect","text":"<pre><code>disconnect()\n</code></pre> <p>Ends connection to Websocket monitor and closes websocket</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.disconnect_websocket","title":"disconnect_websocket","text":"<pre><code>disconnect_websocket(silent: bool = False)\n</code></pre> <p>Gracefully closes Websocket connection</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.execute_callbacks","title":"execute_callbacks","text":"<pre><code>execute_callbacks(cbtype: CALLBACK_TYPE, **kwargs) -&gt; bool\n</code></pre> <p>Execute list of callback functions, all with same arguments passed as keyword arguments</p> <p>returns</p> <p>bool: Whether error reported during execution</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.execute_command","title":"execute_command","text":"<pre><code>execute_command(command: Command, duration: float = 0.0) -&gt; bool | int\n</code></pre> <p>Execute command in simulator.</p> <p>Execution is done through REST API if use_rest is True, or Websocket API if use_rest is False and Websocket is opened.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.execute_command(command)","title":"<code>command</code>","text":"(<code>Command</code>)           \u2013            <p>Command to execute</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.get_command_meta_by_id","title":"get_command_meta_by_id","text":"<pre><code>get_command_meta_by_id(ident: int) -&gt; CommandMeta | None\n</code></pre> <p>Get command meta data by command identifier</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.get_command_meta_by_name","title":"get_command_meta_by_name","text":"<pre><code>get_command_meta_by_name(path: str) -&gt; CommandMeta | None\n</code></pre> <p>Get command meta data by command path</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.get_dataref_meta_by_id","title":"get_dataref_meta_by_id","text":"<pre><code>get_dataref_meta_by_id(ident: int) -&gt; DatarefMeta | None\n</code></pre> <p>Get dataref meta data by dataref identifier</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.get_dataref_meta_by_name","title":"get_dataref_meta_by_name","text":"<pre><code>get_dataref_meta_by_name(path: str) -&gt; DatarefMeta | None\n</code></pre> <p>Get dataref meta data by dataref name</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.get_rest_meta","title":"get_rest_meta","text":"<pre><code>get_rest_meta(obj: Dataref | Command, force: bool = False) -&gt; DatarefMeta | CommandMeta | None\n</code></pre> <p>Get meta data from X-Plane through REST API for object.</p> <p>Fetches meta data and cache it unless force = True.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>DatarefMeta | CommandMeta | None</code>           \u2013            <p>DatarefMeta| CommandMeta: Meta data for object.</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.get_rest_meta(obj)","title":"<code>obj</code>","text":"(<code>Dataref | Command</code>)           \u2013            <p>Objet (Dataref or Command) to get the meta data for</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.get_rest_meta(force)","title":"<code>force</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Force new fetch, do not read from cache (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.invalidate_caches","title":"invalidate_caches","text":"<pre><code>invalidate_caches()\n</code></pre> <p>Remove cache data</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.monitor_command_active","title":"monitor_command_active","text":"<pre><code>monitor_command_active(command: Command) -&gt; bool | int\n</code></pre> <p>Starts monitoring single command for activity.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.monitor_command_active(command)","title":"<code>command</code>","text":"(<code>Command</code>)           \u2013            <p>Command to monitor</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.monitor_dataref","title":"monitor_dataref","text":"<pre><code>monitor_dataref(dataref: Dataref) -&gt; bool | int\n</code></pre> <p>Starts monitoring single dataref.</p> <p>[description]</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.monitor_dataref(dataref)","title":"<code>dataref</code>","text":"(<code>Dataref</code>)           \u2013            <p>Dataref to monitor</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.monitor_datarefs","title":"monitor_datarefs","text":"<pre><code>monitor_datarefs(datarefs: dict, reason: str | None = None) -&gt; Tuple[int | bool, Dict]\n</code></pre> <p>Starts monitoring of supplied datarefs.</p> <p>[description]</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tuple[int | bool, Dict]</code>           \u2013            <p>Tuple[int | bool, Dict]: [description]</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.monitor_datarefs(datarefs)","title":"<code>datarefs</code>","text":"(<code>dict</code>)           \u2013            <p>{path: Dataref} dictionary of datarefs</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.monitor_datarefs(reason)","title":"<code>reason</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Documentation only string to identify call to function.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.rebuild_dataref_ids","title":"rebuild_dataref_ids","text":"<pre><code>rebuild_dataref_ids()\n</code></pre> <p>Rebuild dataref idenfier index</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.register_bulk_command_is_active_event","title":"register_bulk_command_is_active_event","text":"<pre><code>register_bulk_command_is_active_event(paths, on: bool = True) -&gt; bool | int\n</code></pre> <p>Register multiple commands for active reporting.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.register_bulk_command_is_active_event(paths)","title":"<code>paths</code>","text":"(<code>str</code>)           \u2013            <p>Command paths</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.register_bulk_command_is_active_event(on)","title":"<code>on</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>True registers for active reporting, False unregisters.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.register_command_is_active_event","title":"register_command_is_active_event","text":"<pre><code>register_command_is_active_event(path: str, on: bool = True) -&gt; bool | int\n</code></pre> <p>Register single command for active reporting.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.register_command_is_active_event(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Command path</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.register_command_is_active_event(on)","title":"<code>on</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>True registers for active reporting, False unregisters.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.reload_caches","title":"reload_caches","text":"<pre><code>reload_caches(force: bool = False, save: bool = False)\n</code></pre> <p>Reload meta data caches</p> <p>Must be performed regularly, if aircraft changed, etc.</p> <p>Later, Laminar Research has plan for a notification of additing of datarefs</p> <p>Parameters:</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.reload_caches(force)","title":"<code>force</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Force reloading (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.reload_caches(save)","title":"<code>save</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Save raw meta data in JSON formatted files (default: <code>False</code>)</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.reset_connection","title":"reset_connection","text":"<pre><code>reset_connection()\n</code></pre> <p>Reset Websocket connection</p> <p>Stop existing Websocket connect and create a new one. Initialize and reload cache. If datarefs/commands identifier have changed, reassign new identifiers.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.send","title":"send","text":"<pre><code>send(payload: dict, mapping: dict = {}) -&gt; int | bool\n</code></pre> <p>Send payload message (JSON) through Websocket</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>int | bool</code>           \u2013            <p>bool if fails</p> </li> <li> <code>int | bool</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.send(payload)","title":"<code>payload</code>","text":"(<code>dict</code>)           \u2013            <p>JSON message</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.send(mapping)","title":"<code>mapping</code>","text":"(<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>corresponding {idenfier: path} for printing/debugging</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_api_version","title":"set_api_version","text":"<pre><code>set_api_version(api_version: str | None = None)\n</code></pre> <p>Set API version</p> <p>Version is often specified with a v# short string. If no version is supplied, try to take the latest version available. Version numbering is not formally specified, ordering is performed using natural sorting. (See natsort.)</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_false_without_duration","title":"set_command_is_active_false_without_duration","text":"<pre><code>set_command_is_active_false_without_duration(path) -&gt; bool | int\n</code></pre> <p>Execute command inactive with no duration</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_false_without_duration(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Command path</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_true_without_duration","title":"set_command_is_active_true_without_duration","text":"<pre><code>set_command_is_active_true_without_duration(path) -&gt; bool | int\n</code></pre> <p>Execute command active with no duration</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_true_without_duration(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Command path</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_with_duration","title":"set_command_is_active_with_duration","text":"<pre><code>set_command_is_active_with_duration(path: str, duration: float = 0.0) -&gt; bool | int\n</code></pre> <p>Execute command active with duration.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_with_duration(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Command path</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_with_duration(duration)","title":"<code>duration</code>","text":"(<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>float: Duration, should be between 0.0 and 10.0.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_without_duration","title":"set_command_is_active_without_duration","text":"<pre><code>set_command_is_active_without_duration(path: str, active: bool) -&gt; bool | int\n</code></pre> <p>Execute command active with no duration</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_without_duration(path)","title":"<code>path</code>","text":"(<code>str</code>)           \u2013            <p>Command path</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_command_is_active_without_duration(active)","title":"<code>active</code>","text":"(<code>bool</code>)           \u2013            <p>Command active status.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_dataref_value","title":"set_dataref_value","text":"<pre><code>set_dataref_value(path, value) -&gt; bool | int\n</code></pre> <p>Set single dataref value through Websocket</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_network","title":"set_network","text":"<pre><code>set_network(host: str, port: int, api: str, api_version: str) -&gt; bool\n</code></pre> <p>Set network and API parameters for connection</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if some network parameter has changed</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_network(host)","title":"<code>host</code>","text":"(<code>str</code>)           \u2013            <p>Host name or IP address</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_network(port)","title":"<code>port</code>","text":"(<code>int</code>)           \u2013            <p>TCP port number for API</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_network(api)","title":"<code>api</code>","text":"(<code>str</code>)           \u2013            <p>API root path, starts with /.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.set_network(api_version)","title":"<code>api_version</code>","text":"(<code>str</code>)           \u2013            <p>API version string, starts with /, appended to api string to form full path to API.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.start","title":"start","text":"<pre><code>start(release: bool = True)\n</code></pre> <p>Start Websocket monitoring</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop Websocket monitoring</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.unmonitor_command_active","title":"unmonitor_command_active","text":"<pre><code>unmonitor_command_active(command: Command) -&gt; bool | int\n</code></pre> <p>Stops monitoring single command for activity.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.unmonitor_command_active(command)","title":"<code>command</code>","text":"(<code>Command</code>)           \u2013            <p>Command to monitor</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.unmonitor_dataref","title":"unmonitor_dataref","text":"<pre><code>unmonitor_dataref(dataref: Dataref) -&gt; bool | int\n</code></pre> <p>Stops monitoring single dataref.</p> <p>[description]</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.unmonitor_dataref(dataref)","title":"<code>dataref</code>","text":"(<code>Dataref</code>)           \u2013            <p>Dataref to stop monitoring</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.unmonitor_datarefs","title":"unmonitor_datarefs","text":"<pre><code>unmonitor_datarefs(datarefs: dict, reason: str | None = None) -&gt; Tuple[int | bool, Dict]\n</code></pre> <p>Stops monitoring supplied datarefs.</p> <p>[description]</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Tuple[int | bool, Dict]</code>           \u2013            <p>Tuple[int | bool, Dict]: [description]</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.unmonitor_datarefs(datarefs)","title":"<code>datarefs</code>","text":"(<code>dict</code>)           \u2013            <p>{path: Dataref} dictionary of datarefs</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.unmonitor_datarefs(reason)","title":"<code>reason</code>","text":"(<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Documentation only string to identify call to function.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.wait_connection","title":"wait_connection","text":"<pre><code>wait_connection()\n</code></pre> <p>Waits that connection to Websocket opens.</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.write_dataref","title":"write_dataref","text":"<pre><code>write_dataref(dataref: Dataref) -&gt; bool | int\n</code></pre> <p>Writes dataref value to simulator.</p> <p>Writing is done through REST API if use_rest is True, or Websocket API if use_rest is False and Websocket is opened.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>bool | int</code>           \u2013            <p>bool if fails</p> </li> <li> <code>bool | int</code>           \u2013            <p>request id if succeeded</p> </li> </ul>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.write_dataref(dataref)","title":"<code>dataref</code>","text":"(<code>Dataref</code>)           \u2013            <p>Dataref write to simulator</p>"},{"location":"reference/#xpwebapi.ws.XPWebsocketAPI.ws_listener","title":"ws_listener","text":"<pre><code>ws_listener()\n</code></pre> <p>Read and decode websocket messages and calls back</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#python-wrapper-for-x-plane-web-api","title":"Python wrapper for X-Plane Web API","text":""},{"location":"usage/#usage-of-rest-api","title":"Usage of REST API","text":"<pre><code>import xpwebapi\n\n# assuming both app and simulator on same host computer\napi = xpwebapi.rest_api()\n\nprint(api.capabilities)\n# {'api': {'versions': ['v1', 'v2', 'v3']}, 'x-plane': {'version': '12.2.1'}}\n\napi.set_api_version(api_version=\"v2\")\n\ndataref = api.dataref(\"sim/cockpit2/clock_timer/local_time_seconds\")\nprint(dataref)\n# sim/cockpit2/clock_timer/local_time_seconds=42\n\nmapview = api.command(\"sim/map/show_current\")\nmapview.execute()\n</code></pre>"},{"location":"usage/#usage-of-websocket-api","title":"Usage of Websocket API","text":"<pre><code>from xpwebapi import ws_api, CALLBACK_TYPE\n\nws = ws_api()\n\n# Callback function when dataref value changes\ndef dataref_monitor(dataref: str, value: Any):\n    print(f\"dataref updated: {dataref}={value}\")\n\nws.add_callback(cbtype=CALLBACK_TYPE.DATAREF_UPDATE, callback=dataref_monitor)\n\n# Callback function when command gets executed in simulator\ndef command_active_monitor(command: str, active: bool):\n    print(f\"command activated: {command}={active}\")\n\nws.add_callback(cbtype=CALLBACK_TYPE.COMMAND_ACTIVE, callback=command_active_monitor)\n\n# Let's go\nws.connect()\nws.wait_connection() # blocks until X-Plane is reachable\n\ndataref = ws.dataref(\"sim/cockpit2/clock_timer/local_time_seconds\")\nws.monitor_dataref(dataref)\n# alternative:\n# dataref.monitor()\n\nws.monitor_command_active(ws.command(\"sim/map/show_current\"))\n# alternative:\n# command = ws.command(\"sim/map/show_current\")\n# command.monitor()\n\nws.start(release=True)\n\ntime.sleep(30) #secs\n\nprint(\"terminating..\")\nws.stop()\nprint(\"..disconnecting..\")\nws.disconnect()\nprint(\"..terminated\")\n</code></pre>"},{"location":"usage/#usage-of-udp-api","title":"Usage of UDP API","text":"<pre><code>import time\nfrom typing import Any\nimport xpwebapi\n\n# Callback function when dataref value changes\ndef dataref_monitor(dataref: str, value: Any):\n    print(f\"{dataref}={value}\")\n\n# UDP API\nbeacon = xpwebapi.beacon()\nbeacon.start_monitor()\nbeacon.wait_for_beacon()\n\nxp = xpwebapi.udp_api(beacon=beacon)\n\n# In the case of UDP, there are no different types of callbacks\n# just for dataref value changes\nxp.add_callback(callback=dataref_monitor)\n\nmapview = xp.command(\"sim/map/show_current\")\nxp.execute_command(mapview)\n\nxp.monitor_dataref(xp.dataref(path=\"sim/flightmodel/position/indicated_airspeed\"))\nxp.monitor_dataref(xp.dataref(path=\"sim/flightmodel/position/latitude\"))\n\nxp.start()\n\n</code></pre>"}]}